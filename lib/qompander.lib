declare name 		"qompander";
declare version 	"1.3.1";
declare author 		"Bart Brouns";
declare license 	"AGPL-3.0-only";
declare copyright 	"2014 - 2023, Bart Brouns";
declare credits		"ported from qompander in pd by Katja Vetter";
declare see		"http://www.katjaas.nl/compander/compander.html";
declare additional	"filter coefficients by Olli Niemitalo";

//-----------------------------------------------
// imports
//-----------------------------------------------

import("stdfaust.lib");

//-----------------------------------------------
// the DSP
//-----------------------------------------------

qompander(x,factor,threshold,attack,release) =
  (mapping(x,attack,release) / attackDecay(x,attack,release))<: (_,olli1(x):*),(_,olli2(x):*):+:_*(sqrt(0.5))
  with {
    magnitude = (threshold):ba.db2linear;
    exponent = log(magnitude)/log(sin(factor*magnitude*ma.PI/2));

    // to go from puredata biquad coefficients to max/msp and Faust notation: the first two parameters are negated and put last
    olli1(x) = x:		fi.tf2(0.161758, 0, -1, 0, -0.161758):fi.tf2(0.733029, 0, -1, 0, -0.733029):fi.tf2(0.94535 , 0, -1, 0, -0.94535 ):fi.tf2(0.990598, 0, -1, 0, -0.990598);
    olli2(x) = x:mem:	fi.tf2(0.479401, 0, -1, 0, -0.479401):fi.tf2(0.876218, 0, -1, 0, -0.876218):fi.tf2(0.976599, 0, -1, 0, -0.976599):fi.tf2(0.9975  , 0, -1, 0, -0.9975  );

    pyth(x) = sqrt((olli1(x)*olli1(x))+(olli2(x)*olli2(x))):max(0.00001):min(100); //compute instantaneous amplitudes
    attackDecay(x,attack,release) = pyth(x) :an.amp_follower_ud(attack/1000,release/1000);
    mapping(x,attack,release) = attackDecay(x,attack,release) : ((sin((min(1/factor)*(factor/4)) * (2*ma.PI)): max(0.0000001):min(1),exponent) : pow );
  };

//process(x) = qompander(x,factor,threshold,attack,release);
