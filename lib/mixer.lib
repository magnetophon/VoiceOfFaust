//Make a mixer with nrOutChan inputs and nrSends outputs per input

declare name 		"Mixer";
declare version 	"0.2";
declare author 		"Bart Brouns";
declare license 	"AGPL-3.0-only";
declare copyright 	"2014 - 2025, Bart Brouns";

//-----------------------------------------------
// mixerWithSends
//-----------------------------------------------

// mixerWithSends(nrChan,nrOutChan,nrSends)

// A mixer with nrChan inputs, each nrOutChan wide, and having nrSends aux sends

//make a channel with nrSends outputs.
//The inputs are: volumes,audio
monoChannel(nrSends) = (si.bus(nrSends),(_<:si.bus(nrSends))):ro.interleave(nrSends,2):par(o,nrSends,_*_);

//make a si.bus with nrOutChan channels, each having nrSends sends
//inputs: nrSends volumes followed by nrOutChan audio inputs
//outputs: lr,lr,lr
busWithSends(nrOutChan,nrSends)= si.bus(nrOutChan+nrSends)<:par(i,nrOutChan,sel(nrOutChan,nrSends,i)):par(i,nrOutChan,monoChannel(nrSends)):ro.interleave(nrSends,nrOutChan)
with {
sel(nrOutChan,nrSends,i) = (par(i,nrSends,_),par(i,nrOutChan,!),(ba.selector(i+nrSends,nrOutChan+nrSends)));
};

//inputs: nrChan paralel versions of:
//nrSends volumes followed by nrOutChan audio inputs
//outputs: l,r, l,r, l,r

//for example:
//send1levelChan1,send2levelChan1,send3levelChan1,
//Chan1L.Chan1R,
//send1levelChan2,send2levelChan2,send3levelChan2,
//Chan2L.Chan2R,
//send1levelChan3,send2levelChan3,send3levelChan3,
//Chan3L.Chan3R:
//send1levelChan4,send2levelChan4,send3levelChan4,
//Chan4L.Chan4R:
//mixerWithSends(4,2,3)
//will produce:
//send1L,send1R.send2L.send2R,send3L.send3R,
//carefull; no send4L or send4R will be created, as 4 is the number of inputchannels, not the nr of sends
mixerWithSends(nrChan,nrOutChan,nrSends) =
par(i,nrChan,busWithSends(nrOutChan,nrSends)):ro.interleave(nrSends*nrOutChan,nrChan):mix
with {
mix=par(i,nrOutChan*nrSends,(si.bus(nrChan):>_));
};

//-----------------------------------------------
// vocoderMixer
//-----------------------------------------------

// various ways to mix the bands of a vocoder to a certain number of output-channels
// so  si.bus(nrBands) to si.bus(nrOutChan)

// vocoderMixer(audio,freq,ambisonicsOn,outputRoutingEnabled,doubleOscs)
//normal mixer without outputRouting
vocoderMixer(audio,freq,0,0,0) = reEsser(audio,freq,0,enableReEsser) :>si.bus(nrOutChan);

//normal mixer with outputRouting
vocoderMixer(audio,freq,0,1,0) = reEsser(audio,freq,0,enableReEsser) <:(
                (par(i,nrOutChan, si.bus(nrBands/nrOutChan):>((xfadeSelector(outputRouting,0):dezip) *_)))
               ,(si.bus(nrBands):>(par(i,nrOutChan, (xfadeSelector(outputRouting,1):dezip)*_)))
               ,(par(i,nrOutChan, si.bus(nrBands/nrOutChan):>((xfadeSelector(outputRouting,2):dezip)) *_):ro.butterfly(nrOutChan))
               ,(ro.interleave(nrBands/nrOutChan,nrOutChan):par(i, nrOutChan,(si.bus(nrBands/nrOutChan):>_*((xfadeSelector(outputRouting,3):dezip)))))
               ,(si.bus(nrBands):>ro.butterfly(nrOutChan):par(i,nrOutChan,((xfadeSelector(outputRouting,4):dezip)) *_):ro.cross(nrOutChan))
               ,(ro.interleave(nrBands/nrOutChan,nrOutChan):par(i, nrOutChan,(ro.butterfly(nrBands/nrOutChan):>_*((xfadeSelector(outputRouting,5):dezip)))))
               ,(ro.butterfly(nrBands):>(par(i,nrOutChan,((xfadeSelector(outputRouting,6):dezip) *_))))
               /*,(hademar:>par(i,nrOutChan, (outputRouting==2) *_))*/
             ):>si.bus(nrOutChan);

// Ambisonics mixer.
vocoderMixer(audio,freq,1, outputRoutingEnabled,0)  =
  reEsser(audio,freq,0,enableReEsser)
  :routing(outputRoutingEnabled)
  :((angles,si.bus(nrBands)): ro.interleave(nrBands,2))
  : par(i,nrBands,myMap):>si.bus((ambisonicsOrder*2)+1)
with {
  myMap(a) = _<:ho.encoder(ambisonicsOrder, _, a);
  angles = par(i,nrBands/2,   ((angleTop-angleBottom)*(i/(nrBands/2)))+angleBottom)<:(si.bus(nrBands/2),par(i,nrBands/2,_*-1)):ro.interleave(nrBands/2,2);
  routing(0) = si.bus(nrBands);
  routing(1) =si.bus(nrBands)<:(
               (si.bus(nrBands):(par(i,nrBands,(xfadeSelector(outputRouting,0):dezip) *_)))
               ,(ro.interleave(nrBands/nrOutChan,nrOutChan):(par(i,nrBands,(xfadeSelector(outputRouting,1):dezip) *_)))
               ,(ro.butterfly(nrBands):(par(i,nrBands,(xfadeSelector(outputRouting,2):dezip) *_)))
               ,(ro.butterfly(nrBands):ro.interleave(nrBands/nrOutChan,nrOutChan):(par(i,nrBands,(xfadeSelector(outputRouting,3):dezip) *_)))
               /*,(hademar:>par(i,nrOutChan, (outputRouting==2) *_))*/
             ):>si.bus(nrBands);
};

//normal mixer without outputRouting, doubleOscs
vocoderMixer(audio,freq,0,0,1) = reEsser(audio,freq,1,enableReEsser) : par(i,nrOutChan, si.bus(nrBands):>_);

//normal mixer with outputRouting, doubleOscs
vocoderMixer(audio,freq,0,1,1) = reEsser(audio,freq,1,enableReEsser) <:(
                (par(i,nrOutChan, si.bus(nrBands):>((xfadeSelector(outputRouting,0):dezip) *_)))
               ,(si.bus(nrBands*nrOutChan):>(par(i,nrOutChan, (xfadeSelector(outputRouting,1):dezip)*_)))
               ,(par(i,nrOutChan, si.bus(nrBands):>((xfadeSelector(outputRouting,2):dezip)) *_):ro.butterfly(nrOutChan))
               ,(ro.interleave(nrBands,nrOutChan):par(i, nrOutChan,(si.bus(nrBands):>_*((xfadeSelector(outputRouting,3):dezip)))))
               ,(si.bus(nrBands*nrOutChan):>ro.butterfly(nrOutChan):par(i,nrOutChan,((xfadeSelector(outputRouting,4):dezip)) *_):ro.cross(nrOutChan))
               ,(ro.interleave(nrBands,nrOutChan):par(i, nrOutChan,(ro.butterfly(nrBands):>_*((xfadeSelector(outputRouting,5):dezip)))))
               ,(ro.butterfly(nrBands*nrOutChan):>(par(i,nrOutChan,((xfadeSelector(outputRouting,6):dezip) *_))))
               /*,(hademar:>par(i,nrOutChan, (outputRouting==2) *_))*/
             ):>si.bus(nrOutChan);

// Ambisonics mixer, doubleOscs
vocoderMixer(audio,freq,1, outputRoutingEnabled,1)  =
  reEsser(audio,freq,1,enableReEsser)
  :routing(outputRoutingEnabled)
  :((angles,si.bus(nrBands*nrOutChan)) : ro.interleave(nrBands*nrOutChan,2))
  : par(i,nrBands*nrOutChan,myMap):>si.bus((ambisonicsOrder*2)+1)
with {
  myMap(a) = _<:ho.encoder(ambisonicsOrder, _, a);
  angles = par(i,nrBands*nrOutChan/2,   ((angleTop-angleBottom)*(i/(nrBands*nrOutChan/2)))+angleBottom)<:(si.bus(nrBands),par(i,nrBands,_*-1)):ro.interleave(nrBands,2);
  routing(0) = si.bus(nrBands*nrOutChan);
  routing(1) =si.bus(nrBands*nrOutChan)<:(
               (si.bus(nrBands*nrOutChan):(par(i,nrBands*nrOutChan,(xfadeSelector(outputRouting,0):dezip) *_)))
               ,(ro.interleave(nrBands,nrOutChan):(par(i,nrBands*nrOutChan,(xfadeSelector(outputRouting,1):dezip) *_)))
               ,(ro.butterfly(nrBands*nrOutChan):(par(i,nrBands*nrOutChan,(xfadeSelector(outputRouting,2):dezip) *_)))
               ,(ro.butterfly(nrBands*nrOutChan):ro.interleave(nrBands,nrOutChan):(par(i,nrBands*nrOutChan,(xfadeSelector(outputRouting,3):dezip) *_)))
               /*,(hademar:>par(i,nrOutChan, (outputRouting==2) *_))*/
             ):>si.bus(nrBands*nrOutChan);
};
