//-----------------------------------------------
// guide index, all follower oscilators 'clock' to this.
//-----------------------------------------------
// simple sawtooth waveform oscillator between 0 and 1
guideIndex(freq,index)= lf_sawpos(freq/4); // lowest possible pitch, as we can only shift up, using wrap
fund(freq,oct)= (4 * oct * guideIndex(freq,index)) : ma.decimal; //choose octaves
fundPhase(freq,index,oct, phase)= (4 * oct * guideIndex(freq,index)) : ma.decimal; //choose octaves and set phase

//-----------------------------------------------
// Some general functions
//-----------------------------------------------
// dezipper
dezip(x) = x:smooth(0.999);
dezipBands = par(i, nrBands, smooth(0.999));
// minimum of n values
minOfN(1) = _;
minOfN(2) = min;
minOfN(n) = (minOfN(n-1),_):min;
// maximum of n values
maxOfN(1) = _;
maxOfN(2) = max;
maxOfN(n) = (maxOfN(n-1),_):max;
// sum of n values
sumOfN(1) = _;
sumOfN(2) = +;
sumOfN(n) = (sumOfN(n-1),_):+;
// cheaper than actual dB calculations:
volScale=_:pow(2):smooth(0.999);
envelop                 = abs : max ~ -(1.0/SR) : max(db2linear(-70)) : linear2db;
VuMeter                 = par(i,2,_<:(_, (envelop :(OSCgroup(MeterGroup(hbargraph("[4][unit:dB][tooltip: output level in dB]", -70, +6))))):attach));

octaveMultiplier	=
    _<:
    (
        (_==-2) * 0.25,
        (_==-1) * 0.5,
        (_==0),
        (_==1) * 2,
        (_==2) * 4
    ):>_;

      // make a log array of values, from bottom to top
LogArray(bottom,top,nrElements) =     par(i,nrElements,   pow((pow((top/bottom),1/(nrElements-1))),i)*bottom);

VocoderFreqsChooser(bottom,mid,band,top,0) = VocoderFreqs(bottom,top);
VocoderFreqsChooser(bottom,mid,band,top,1) = VocoderFreqsParametricMid(bottom,mid,band,top);


VocoderFreqs(bottom,top) = LogArray(bottom,top,nrBands);

VocoderFreqsParametricMid(bottom,mid,band,top) =
  (
    (
    (LogArray(midVal(1),top,nrBands):par(i,nrBands,_*(xfadeSelector(band,1))))
    ,((bottom,LogArray(midVal(2),top,nrBands-1)):par(i,nrBands,_*(xfadeSelector(band,2))))
    )
    ,par(j,nrBands-4,
        (
            (LogArray(bottom,midVal(midBand),midBand):(bus(midBand-1),!))
            ,LogArray(midVal(midBand),top,nrBands-midBand+1)
        ):par(i,nrBands,_*(xfadeSelector(band,midBand)))with {midBand=j+3;}
    )
    ,
    (
      ((LogArray(bottom,midVal(nrBands-1),nrBands-1),top):par(i,nrBands,_*(xfadeSelector(band,nrBands-1))))
      ,(LogArray(bottom,midVal(nrBands),nrBands):par(i,nrBands,_*(xfadeSelector(band,nrBands))))
    )
  )
  :>bus(nrBands)
  with {
  midVal(band)=
  ((mid>0)*((pow(((top/origMid(band))),mid)*origMid(band))))
  + ((mid<=0)*((pow(((bottom/origMid(band))),abs(mid))*origMid(band))));

  /*((mid>0)*(((mid*(top-origMid(band)))+origMid(band))))*/
  /*+ ((mid<=0)*(((mid)*(origMid(band)-bottom))+origMid(band)));*/
  origMid(band) = (VocoderFreqs(bottom,top):selector(band-1,nrBands)):>_;
  };


      // make a lin array of values, from bottom to top
      //VocoderLinArray(bottom,top) =     par(i,nrBands,   ((top-bottom)*(i/(nrBands-1)))+bottom);

LinArray(bottom,top,0) =   0:! ;
LinArray(bottom,top,nrElements) =     par(i,nrElements,   ((top-bottom)*(i/(nrElements-1)))+bottom);

VocoderLinArrayChooser(bottom,mid,band,top,0) = VocoderLinArray(bottom,top);
VocoderLinArrayChooser(bottom,mid,band,top,1) = VocoderLinArrayParametricMid(bottom,mid,band,top);

VocoderLinArray(bottom,top) =     LinArray(bottom,top,nrBands);
      // doesn't compile:
/*VocoderLinArrayParametricMid(bottom,mid,band,top) = ArrayPart(floor(band+1)):par(i,nrBands,_*(xfadeSelector(band,floor(band+1))))*/
           /*with {*/
/*ArrayPart(1)         = LinArray(mid,top,nrBands);*/
/*ArrayPart(2)         = bottom,LinArray(mid,top,nrBands-1);*/
/*ArrayPart(midBand)         =*/
  /*(LinArray(bottom,mid,midBand):(bus(midBand-1),!))*/
  /*,LinArray(mid,top,nrBands-midBand+1);*/
           /*};*/
/*ArrayPart(nrBands-1) = LinArray(bottom,mid,nrBands-1),top;*/
/*ArrayPart(nrBands)   = LinArray(bottom,mid,nrBands);*/

VocoderLinArrayParametricMid(bottom,mid,band,top) =
(
  (
  (LinArray(mid,top,nrBands):par(i,nrBands,_*(xfadeSelector(band,1))))
  ,((bottom,LinArray(mid,top,nrBands-1)):par(i,nrBands,_*(xfadeSelector(band,2))))
  )
  ,par(j,nrBands-4,
      (
         (LinArray(bottom,mid,midBand):(bus(midBand-1),!))
         ,LinArray(mid,top,nrBands-midBand+1)
      ):par(i,nrBands,_*(xfadeSelector(band,midBand)))with {midBand=j+3;}
  )
  ,
  (
    ((LinArray(bottom,mid,nrBands-1),top):par(i,nrBands,_*(xfadeSelector(band,nrBands-1))))
    ,(LinArray(bottom,mid,nrBands):par(i,nrBands,_*(xfadeSelector(band,nrBands))))
  )
)
:>bus(nrBands);

bt=hslider("[0]bottom", 0, 0, 1, 0.001);
md=hslider("[1]mid", 0, 0, 1, 0.001);
bd=hslider("[2]band", nrBands/2, 1, nrBands, 0.001);
tp=hslider("[3]top", 0, 0, 1, 0.001);

  GRmeter_group(x)  = vgroup("[3] GR [tooltip: gain reduction in dB]", x);
    meter(nr)           = GRmeter_group(  _<:(_,(_:min(1):max(0):( (hbargraph("%nr", 0, 1))))):attach);

gainCompareElement(x,compGain) = (_<:(_,((_)*x)))~compare:(!,_) with {
  compare(gain,gainedX) =
    select2(gainCompEnable,
      1,
      ((((gain:max(0.001):linear2db)+select2((gainedX:amp_follower_ud(0.002,0.004))>=compGain,up,down(gain,gainedX))):db2linear))
    );
  up = dbPs;
  down(gain,gainedX) = dbPs*-2;
  // down(gain,gainedX) = (((gainedX:amp_follower_ud(0.002,0.004):linear2db)-(compGain:linear2db))*-1)-(gain:max(0.001):linear2db);
  };

gainCompare(audio,freq,0) = bus(nrBands);
gainCompare(audio,freq,1) = (bus(nrBands),analizer(voice(audio,index),freq,fidelity,enableDeEsser)):interleave(nrBands,2):par(i,nrBands,gainCompareElement);
gainNormalise = (bus(nrBands),par(i, nrBands, 1)):interleave(nrBands,2):par(i,nrBands,gainCompareElement);

// scale the gain between 0 = all at avg, 1 = normal and 2 = expansion
// expansion means:
//   the loudest band stays the same
//   soft bands get softer

// gainScale(enableGainScale,scale,f)
gainScale(0,scale,f) = bus(nrBands);
gainScale(1,scale,f) = bus(nrBands)<:par(i, nrBands, (gain(i)+MinVolume):db2linear<:_*(_>0.00000001))
with {
  gain(i) = bus(nrBands)<:par(j, nrBands, (max(0.00000001):linear2db+freqWeighting(freq(j),weightingKind))-MinVolume)<:
  // gain(i) = bus(nrBands)<:par(i, nrBands, (max(0.00000001):linear2db+freqWeighting(freq(i),weightingKind))-MinVolume)<:
  // gain(i) = par(i, nrBands, max(0.00000001):linear2db+freqWeighting(freq(i),weightingKind))<:
    (
       ((xfadeSelector(scale,0)* ( AvgVolume+  compresVolCompensate ))+freqWeighting(freq(i),weightingKind))
       // we use scale inside expander, so from scale=1 to 2 we don't want xfadeSelector
      ,(xfadeSelector(scale,1)*(scale<=1)*selector(i,nrBands))
      ,((scale>1)*expander(i))
      // (selector(i,nrBands))
    ):>_-freqWeighting(freq(i),weightingKind);
  freq(i) = analizerCenters(f):selector(i,nrBands);
  expander(i) = bus(nrBands)<:
    (
      (scaledVolume(i) + MaxVolume) + expandVolCompensate
    ):>_;
  scaledVolume(i) =  bus(nrBands)<:( ((MaxVolume*-1)+selector(i,nrBands)) * (scale:pow(3)) );
  AvgVolume = sumOfN(nrBands)/nrBands;
  MaxVolume = maxOfN(nrBands);
  MinVolume = 0;//-1000;//par(j,nrBands,max(0.00000001):linear2db): minOfN(nrBands);
  compresVolCompensate = (((scale:min(1)*-1)+1)*12);
  expandVolCompensate = ((scale-1):max(0)*8);
};

// gainScale(scale,f) = bus(nrBands)<:par(i, nrBands, gain(i))
// with {
//   gain(i) = par(i, nrBands, max(0.00000001):linear2db+freqWeighting(freq(i),weightingKind))<:
//     (
//        (xfadeSelector(scale,0)*(par(j, nrBands, _+144) : AvgVolume-144)+freqWeighting(freq(i),weightingKind))
//       ,(xfadeSelector(scale,1)*(scale<1)*selector(i,nrBands))
//       ,((scale>=1)*(expander(i) - (scaleBack * ((scale-1):max(0)))) )
//     ):>_-freqWeighting(freq(i),weightingKind):db2linear;
//   freq(i) = analizerCenters(f):selector(i,nrBands);
//   expander(i) = bus(nrBands)<:
//     (
//       (scaledVolume(i) )
//     ):>_;
// //scaledVolume(i) =  bus(nrBands)<:( ((MaxVolume*-1)+selector(i,nrBands)) * (scale:pow(3)) );
//   scaledVolume(i) =  bus(nrBands)<: (( (selector(i,nrBands)-MaxVolume) * (scale:pow(3)) ) + MaxVolume);
//   scaleBack =  bus(nrBands)<:(par(i, nrBands, scaledVolume(i)) : AvgVolume) - AvgVolume;
//   AvgVolume = sumOfN(nrBands)/nrBands;
//   MaxVolume = maxOfN(nrBands);
// };

// gainScale2(scale,f) = bus(nrBands)<:par(i, nrBands, gain(i))
// with {
//   gain(i) = par(i, nrBands, max(0.00000001):linear2db+freqWeighting(freq(i),weightingKind))<:
//     (
//        (xfadeSelector(scale,0)*(par(j, nrBands, _+144) : AvgVolume-144)+freqWeighting(freq(i),weightingKind))
//       ,(xfadeSelector(scale,1)*(scale<1)*selector(i,nrBands))
//       ,((scale>=1)*expander(i))
//     ):>_-freqWeighting(freq(i),weightingKind):db2linear;
//   freq(i) = analizerCenters(f):selector(i,nrBands);
//   expander(i) = bus(nrBands)<:
//     (
//       (scaledVolume(i)- scaleBack + MaxVolume)
//     ):>_;
//   scaledVolume(i) =  bus(nrBands)<:( ((AvgVolume*-1)+selector(i,nrBands)) * (scale:pow(3)) );
//   scaleBack =  bus(nrBands)<:(par(i, nrBands, scaledVolume(i)): MaxVolume);
//   AvgVolume = sumOfN(nrBands)/nrBands;
//   MaxVolume = maxOfN(nrBands);
// };

// gainScale(scale,f) = bus(nrBands)<:par(i, nrBands, gain(i))
// with {
//   gain(i) = par(i, nrBands,linear2db+freqWeighting(freq(i),weightingKind):max(-144))<:
//     (
//        (xfadeSelector(scale,0)*(par(j, nrBands, _+144) : AvgVolume-144))
//       ,(xfadeSelector(scale,1)*(scale<1)*selector(i,nrBands))
//       ,((scale>=1)*expander(i))
//     ):>_:db2linear;
//   freq(i) = analizerCenters(f):selector(i,nrBands);
//   expander(i) = bus(nrBands)<:
//     (
//       (scaledVolume(i)- scaleBack + MaxVolume)
//     ):>_-freqWeighting(freq(i),weightingKind);
//   scaledVolume(i) =  bus(nrBands)<:( ((AvgVolume*-1)+selector(i,nrBands)) * (scale:pow(3)) );
//   scaleBack =  bus(nrBands)<:(par(i, nrBands, scaledVolume(i)): MaxVolume);
//   AvgVolume = sumOfN(nrBands)/nrBands;
//   MinVolume = minOfN(nrBands);
//   MaxVolume = maxOfN(nrBands);
// };


freqWeighting(f,weightingKind) =
// Atable(f);
// ITUtable(f);
  (
    (xfadeSelector(weightingKind,0)*-8),
    (xfadeSelector(weightingKind,1)*Atable(f)),
    (xfadeSelector(weightingKind,2)*ITUtable(f))
  ):>_;


// source: https://en.wikipedia.org/wiki/ITU-R_468_noise_weighting
// :<math>R_{ITU}(f) = \frac{1.246332637532143\cdot10^{-4} \, f}{\sqrt{(h_1(f))^2 + (h_2(f))^2}}</math>
// :<math>ITU(f) = 18.2+20\log_{10}\left(R_{ITU}(f)\right)</math>
// where
// :<math>h_1(f)=-4.737338981378384\cdot10^{-24} \, f^6 + 2.043828333606125\cdot10^{-15} \, f^4 - 1.363894795463638\cdot10^{-7} \, f^2 + 1</math>
// :<math>h_2(f)=1.306612257412824\cdot10^{-19} \, f^5  - 2.118150887518656\cdot10^{-11} \, f^3 + 5.559488023498642\cdot10^{-4} \, f</math>

// todo: values do not 100% match table from wikipedia:
// OK till 2000 Hz,
// peak at +-4500 Hz instead of 6300 Hz
// 2nd 0dB point at +- 7500 Hz instead of 12500 Hz
// 12500 Hz at -16dB instead  of 0dB
// 20000 Hz at -30dB instead of -22,2dB
ITUtable(f) = rdtable(int(SRmax/2)+1,ITUs,int(f:max(1):int(min(SRmax/2))));
// ITUtable(f) = rdtable(20000,ITU,int(f:max(20)));
ITUs = ITU(time);
ITU(f) = 18.2+linear2db(rITU(f));
rITU(f) = ( 1.246332637532143*(10:pow(-4))*f) / (sqrt( (h1(f):pow(2)) + (h2(f):pow(2)) ));
h1(f) =   (-4.737338981378384*(10:pow(-24))*(f:pow(6)))+(2.043828333606125*(10:pow(-15))*(f:pow(4)))-(1.363894795463638*(10:pow(-7))*(f:pow(2)))+1;
h2(f) =   ( 1.306612257412824*(10:pow(-19))*(f:pow(5)))+(2.118150887518656*(10:pow(-11))*(f:pow(3)))-(5.559488023498642*(10:pow(-4))*f);

myTable(f) = rdtable(int(SRmax/2)+1,my(time),int(f:max(1):int(min(SRmax/2))));
my(f) =
  (pow((pow((top/bottom),1/(nrElements-1))),(f:min(nrElements)))*bottom)
  // +
  // ((pow((pow((top2/bottom2),1/(nrElements2-1))),((f+1-nrElements):min(1)))*bottom2) * f>nrElements)
  with {
    top = 0;
    bottom = -144;//vslider("basscut", -100, -200, 0, 1);
    nrElements = 2000;
    top2 = 24;
    bottom2 = 0;
    nrElements2 = int(SRmax/2)-nrElements;
  };

// ===A===
// :<math>R_A(f)= {12200^2\cdot f^4\over (f^2+20.6^2)\quad\sqrt{(f^2+107.7^2)\,(f^2+737.9^2)}
// \quad (f^2+12200^2)}\ ,</math>
// :<math>A(f)=2.0+20\log_{10}\left(R_A(f)\right)</math>

rA(freq) = ((12200:pow(2)) * (f:pow(4))) / ( ((f:pow(2)) + (20.6:pow(2))) * sqrt(((f:pow(2)) + (107.7:pow(2))) * ((f:pow(2)) + (737.9:pow(2)))) * ((f:pow(2)) + (12200:pow(2))))
  with { f = (freq:max(20)(min(SRmax/4))); };
A(f) = 2 + linear2db(rA(f));
Atable(f) = rdtable(int(SRmax/2)+1,A(time),int(f:max(20):int(min(SRmax/4))));


//normal mixer without outputRouting
vocoderMixer(0,0) = bus(nrBands):>bus(nrOutChan);

//normal mixer with outputRouting
vocoderMixer(0,1) =bus(nrBands)<:(
                (par(i,nrOutChan, bus(nrBands/nrOutChan):>((xfadeSelector(outputRouting,0):dezip) *_)))
               ,(bus(nrBands):>(par(i,nrOutChan, (xfadeSelector(outputRouting,1):dezip)*_)))
               ,(par(i,nrOutChan, bus(nrBands/nrOutChan):>((xfadeSelector(outputRouting,2):dezip)) *_):butterfly(nrOutChan))
               ,(interleave(nrBands/nrOutChan,nrOutChan):par(i, nrOutChan,(bus(nrBands/nrOutChan):>_*((xfadeSelector(outputRouting,3):dezip)))))
               ,(bus(nrBands):>butterfly(nrOutChan):par(i,nrOutChan,((xfadeSelector(outputRouting,4):dezip)) *_):cross(nrOutChan))
               ,(interleave(nrBands/nrOutChan,nrOutChan):par(i, nrOutChan,(butterfly(nrBands/nrOutChan):>_*((xfadeSelector(outputRouting,5):dezip)))))
               ,(butterfly(nrBands):>(par(i,nrOutChan,((xfadeSelector(outputRouting,6):dezip) *_))))
               /*,(hademar:>par(i,nrOutChan, (outputRouting==2) *_))*/
             ):>bus(nrOutChan);

// Ambisonics mixer.
vocoderMixer(1, outputRoutingEnabled)  = routing(outputRoutingEnabled):((angles,bus(nrBands)): interleave(nrBands,2)) : par(i,nrBands,myMap):>bus((ambisonicsOrder*2)+1)
with {
  myMap(a) = _<:encoder(ambisonicsOrder, _, a);
  angles = par(i,nrBands/2,   ((angleTop-angleBottom)*(i/(nrBands/2)))+angleBottom)<:(bus(nrBands/2),par(i,nrBands/2,_*-1)):interleave(nrBands/2,2);
  routing(0) = bus(nrBands);
  routing(1) =bus(nrBands)<:(
               (bus(nrBands):(par(i,nrBands,(xfadeSelector(outputRouting,0):dezip) *_)))
               ,(interleave(nrBands/nrOutChan,nrOutChan):(par(i,nrBands,(xfadeSelector(outputRouting,1):dezip) *_)))
               ,(butterfly(nrBands):(par(i,nrBands,(xfadeSelector(outputRouting,2):dezip) *_)))
               ,(butterfly(nrBands):interleave(nrBands/nrOutChan,nrOutChan):(par(i,nrBands,(xfadeSelector(outputRouting,3):dezip) *_)))
               /*,(hademar:>par(i,nrOutChan, (outputRouting==2) *_))*/
             ):>bus(nrBands);
};
// crossfade between multiple inputs (just the gain)
xfadeSelector(sel,nr) =
(((sel<=nr)*((sel-nr)+1):max(0))
+ ((sel>nr)*((nr-sel)+1):max(0))
);

autoSat(x) = x:min(1):max(-1)<:2.0*_ * (1.0-abs(_)*0.5);

postProc(nrOutChan,0,volume,width) = par(i, nrOutChan, _*(volume:dezip)):WidePanner(width,nrOutChan):par(i,nrOutChan,dcblocker:autoSat);

postProc(nrOutChan,1,volume,width) =
           wider(ambisonicsOrder,width) :rotate(ambisonicsOrder, rotation) :optimInPhase(ambisonicsOrder)
           <:((decoderStereo(ambisonicsOrder):par(i,2,(_*volume):dcblocker: autoSat)), bus(2*ambisonicsOrder+1));
//to make it stereo
//todo: implement http://music.columbia.edu/pipermail/music-dsp/2012-February/070328.html
/*WidePanner(w,L,R) = (((1+w)*L + (1-w)*R)/2) , (((1+w)*R + (1-w)*L)/2);*/
WidePanner(w,2) = bus2<:(((1+w)*L + (1-w)*R)/2) , (((1+w)*R + (1-w)*L)/2)
with {
  L = selector(0,2);
  R = selector(1,2);
};
// for mutichannel, bypass the widepanner.
WidePanner(w,nr) = bus(nr);
voice(audio,index) = qompander(audio:highpass(3,PitchTracker(audio,enablePitchTracker)*0.75),qfactor,qThreshold,qAttack,qRelease);

//is actually dual mono. on purpose; to try and keep the image in the center.
//todo: make this stereo, and find a better way for  KP-FX to stay centered
oldstereoLimiter(pitch)=
  (dcblocker*0.5:compressor_mono(100,-12,decay*0.5,decay)),
  (dcblocker*0.5:compressor_mono(100,-12,decay*0.5,decay)):
  (compressor_mono(100,-6,0.001,decay*0.5)),
  (compressor_mono(100,-6,0.001,decay*0.5))
  with {
    decay                                = (1/pitch);
    same(x,time)                         = (x@time) == x;
    intervalTester(x,nrSamples,interval) = (prod(i,nrSamples,same(x,i*interval+1)));
    blockNoise                           = par(i,2,(intervalTester(pitch,2,265)*-1+1:smooth(0.999))*_);
    };

monoLimiter(pitch)=
  (dcblocker:compressor_mono(100,-6,decay*0.5,decay)):
  (compressor_mono(100,-3,0,decay*0.5))
  with {
    decay                                = (1/pitch);
    same(x,time)                         = (x@time) == x;
    intervalTester(x,nrSamples,interval) = (prod(i,nrSamples,same(x,i*interval+1)));
    blockNoise                           = par(i,2,(intervalTester(pitch,2,265)*-1+1:smooth(0.999))*_);
    };

stereoLimiter(pitch) =monoLimiter(pitch),monoLimiter(pitch);
