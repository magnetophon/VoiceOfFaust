//-----------------------------------------------
// vocoder analizer
//-----------------------------------------------
import("../lib/classicVocoder.lib"); // for StereoVolFilterBankNoFeedback

subLevel(audio,freq) = voice(audio,freq):ef.gate_mono(qThreshold-15,0,0.1,0.05):fi.lowpass(3,300):an.amp_follower_ud(0.003,0.005)*4:ma.tanh;

//subLevel(audio) = audio:fi.lowpass(3,300):an.amp_follower_ud((vslider("up", 0, 0, 1, 0)*0.1),(vslider("down", 0, 0, 1, 0.001)*0.1))*6:ma.tanh;

//analizerCenters(freq) = VocoderFreqs(0.853553,128):(par(i,nrBands, _,freq:*:min(ma.SR/2)));

analizerCenters(freq) = VocoderFreqs(analizerBottom ,analizerTop):(par(i,nrBands, _,freq:*:min(ma.SR/2):dezip_sel));

dezip_sel(x) = select2(checkbox("dezip"),x,x:dezip);

//an.amp_follower_ud params set for minimal distortion
//also sounds cool to vary between this and 0

analizers=
ro.interleave(nrBands,4):par(i, nrBands,(autoQresonBP:an.amp_follower_ud(0.002 ,0.004)));

autoQresonBP(f,prevC,c,q) =
    // f:fi.resonbp(c:min((ma.SR/2)-10),Q,1):fi.resonbp(c:min((ma.SR/2)-10),Q,compensate*0.2)
    f:chooseResonBP(stableFilters,c:min((ma.SR/2)-10),Q,1):chooseResonBP(stableFilters,c:min((ma.SR/2)-10),Q,compensate*0.2)
    with {
      Q = ((((c-(prevC*autoQ)):max(20))*q)/(c:max(20)))*(1+(2*autoQ));
      BP1= 1.766;//1/hslider("[-1]bp1",	0, 0, 1, 0.001); //1.766
      BP2 =9.43;//1/hslider("[-1]bp2",	0, 0, 1, 0.001); //9.43
      FAC1 = 1;//hslider("[-1]fac1",	1, 1, 30, 0.001);//1
      FAC2 = 1.7;//hslider("[-1]fac2",	1, 1, 30, 0.001);//1.7
      FAC3 = 4;//hslider("[-1]fac3",	1, 1, 30, 0.001);//4
      com = 1/(Q/49);
      compensate =
            (((com*FAC1),(com<BP1)):*),
            ((((com-BP1)*FAC2+FAC1*BP1),((com>=BP1)&(com<=BP2))):*),
            ((((com-BP2)*FAC3+((BP2-BP1)*FAC2)+FAC1*BP1),(com>BP2)):*)
            :>_+1;
    };

// analizer(audio,freq,fidelity,enableDeEsser)
analizer(audio,freq,fidelity,0)=simpleAnalizer(audio,freq);
analizer(audio,freq,fidelity,1)=deEssedAnalizer(audio,freq,fidelity);

simpleAnalizer(audio,freq)=
    (
      (audio<:si.bus(nrBands))
     ,(analizerCenters(freq)<:(
        (si.bus(nrBands)<:(freq/2,par(i,nrBands,ba.selector(i-1,nrBands)))
        )
       ,(si.bus(nrBands))))
     ,(analizerQ<:si.bus(nrBands))
    ):analizers : gainScale(enableGainScale,gainScaling,freq);

outputAnalizer(freq, group, audio)=
    (
      (audio<:si.bus(nrBands))
     ,(centers(freq,group) <:(
        (si.bus(nrBands)<:(freq/2,par(i,nrBands,ba.selector(i-1,nrBands)))
        )
       ,(si.bus(nrBands))))
     ,(analizerQ<:si.bus(nrBands))
    ):analizers;

avgOutVol(freq, group, audio) =
    outputAnalizer(freq, group, audio)
    :par(i, nrBands, ba.linear2db)
     :>_/nrBands;

avgInVol(freq, audio) =
    simpleAnalizer(audio,freq)
    :par(i, nrBands, ba.linear2db)
     :>_/nrBands;

inOutVolCompensate(freq, group, strength, inAudio,outAudio) =
    (avgInVol(freq, inAudio) - avgOutVol(freq, group, outAudio))
    * strength
    : ba.db2linear
      *outAudio;

inputSpectrum(freq, audio) =
    (
      (simpleAnalizer(audio,freq)
       :par(i, nrBands, ba.linear2db))
    , (avgInVol(freq, audio)<:si.bus(nrBands))
    )
    : ro.interleave(nrBands,2)
    : par(i, nrBands, -);

outputSpectrum(freq, group, audio) =
    (
      (outputAnalizer(freq, group, audio)
       :par(i, nrBands, ba.linear2db))
    , (avgOutVol(freq, group, audio)<:si.bus(nrBands))
    )
    : ro.interleave(nrBands,2)
    : par(i, nrBands, -);

eqGains(freq, group, strength, inAudio,outAudio) =
    (
      outputSpectrum(freq, group, audio)
    , inputSpectrum(freq, audio)
    )
    : ro.interleave(nrBands,2)
    : par(i, nrBands, (_-_) * strength)
    : ro.cross(nrBands);

eqCompensate(freq, group, strength, inAudio,outAudio) =
    (eqGains(freq, group, strength, inAudio,outAudio)
    , outAudio)
    : shelfcascade ((xOverFreqs(freq,group)));

test_xOverFreqs(freq,group) =
    (
      (
        par(i, 15, (i+1)*99)
        // , par(i, 8, (i+1)*999)
        // ba.subseq((LogArray(bottom,top,nrBands)), 0, nrBands-1)
        // ,
        // ba.subseq((LogArray(bottom,top,nrBands)), 1, nrBands-1)
      )
      // : ro.interleave(2,nrBands-1)
      // : par(i, nrBands-1, LogMiddle)

      // (centers(freq,group))
        // : (si.bus(nrBands-1),!)
        // par(i, nrBands-1, freq*(i+1))
        // : (si.bus(nrBands))
    );

xOverFreqs(freq,group) =
    ( (centers(freq,group)
       : (si.bus(nrBands-1),!))
    , (centers(freq,group)
       : (!,si.bus(nrBands-1)))
    )
    : ro.interleave(2,nrBands-1)
    : par(i, nrBands-1, LogMiddle);


/* Cascade of shelving filters to apply gain per band.
   *
   * `lf` : list of frequencies
   * followed by (count(lf) +1) gain parameters
   */
shelfcascade(lf) =
    // lf:par(i, outputs(lf), _*666)
    lsBlock
    :
    // bsBlock(0)
    // :
    seq(i, nrBands-2, bsBlock(i))
    :hsBlock
     // bsBlock(3):
     // bsBlock(4):
     // bsBlock(5)
     // fbus(lf), ls3(first(lf)) : sc(lf)
with {
  sc((f1, f2, lf)) = fbus((f2,lf)), bs3(f1,f2) : sc((f2,lf)); // recursive pattern
  sc((f1, f2))     = _, bs3(f1,f2) : hs3(f2);                // halting pattern
  fbus(l)          = par(i, outputs(l), _);                  // a bus of the size of a list
  first((x,xs))    = x;                                      // first element of a list

  lsBlock(f,g,x) =
      si.bus((nrBands-1)*2-1)
    , ls3(f,g,x)
    , f;
  bsBlock(i,f1,f2,g,x) =
      si.bus((nrBands-2-i)*2-1)
    , (x:bs3(f1,f2,g))
    , f2;
  hsBlock(f,g,x) =
      hs3(f,g,x);
  /* higher order low, band and hi shelf filter primitives */
  ls3(f,g) = fi.svf.ls (f, .5, g3) : fi.svf.ls (f, .707, g3) : fi.svf.ls (f, 2, g3) with {g3 = g/3;};
  bs3(f1,f2,g) = ls3(f1,-g) : ls3(f2,g);
  hs3(f,g) = fi.svf.hs (f, .5, g3) : fi.svf.hs (f, .707, g3) : fi.svf.hs (f, 2, g3) with {g3 = g/3;};
};

OLDshelfcascade(lf) = fbus(lf), ls3(first(lf)) : sc(lf)
with {
  sc((f1, f2, lf)) = fbus((f2,lf)), bs3(f1,f2) : sc((f2,lf)); // recursive pattern
  sc((f1, f2))     = _, bs3(f1,f2) : hs3(f2);                // halting pattern
  fbus(l)          = par(i, outputs(l), _);                  // a bus of the size of a list
  first((x,xs))    = x;                                      // first element of a list
  /* higher order low, band and hi shelf filter primitives */
  ls3(f,g) = fi.svf.ls (f, .5, g3) : fi.svf.ls (f, .707, g3) : fi.svf.ls (f, 2, g3) with {g3 = g/3;};
  bs3(f1,f2,g) = ls3(f1,-g) : ls3(f2,g);
  hs3(f,g) = fi.svf.hs (f, .5, g3) : fi.svf.hs (f, .707, g3) : fi.svf.hs (f, 2, g3) with {g3 = g/3;};
};


deEssedAnalizer(audio,freq,fidelity) =
    (simpleAnalizer(audio,freq), deEssGains(audio,freq,deEssStrenght*dynAmount)) : ro.interleave(nrBands,2) : par(i, nrBands, (ba.linear2db+_):ba.db2linear)
with {
  dynAmount = 1-(deEssDynStrenght*(fidelity:pow(42):si.lag_ud(0.002,0.004)));
};

deEssGains(audio,freq,strenght) = preEmp : par(i, nrBands, ((deEssThreshold-_) : min(0) * strenght ) )
with {
  highPassPreEmp = analizerCenters(freq):par(i, nrBands,  ( ba.hz2pianokey - (deEssCorner:ba.hz2pianokey) ) :min(0) * (deEssdBperOctave/12));
  preEmp = ( simpleAnalizer(audio,freq) , highPassPreEmp):ro.interleave(nrBands,2) : par(i, nrBands, ba.linear2db+_);
};

// reEsser(audio,freq,doubleOscs,enableReEsser)
reEsser(audio,freq,doubleOscs,0) = si.bus(nrBands*(doubleOscs+1));
reEsser(audio,freq,doubleOscs,1) =
    // si.bus(nrOuts)
    (
      si.bus(nrOuts),
      (
        (
          (no.noise<:si.bus(nrBands))
          // (no.multinoise(nrBands))
         ,(analizerCenters(freq)<:((si.bus(nrBands)<:(freq/2,par(i,nrBands,ba.selector(i-1,nrBands)))),(si.bus(nrBands))))
         ,reEssgains(audio,freq)
         ,(analizerQ<:si.bus(nrBands))
        )
        :(ro.interleave(nrBands,5):par(i, nrBands, volFilter))<:si.bus(nrOuts)
      )
    )
    :>si.bus(nrOuts)
with {
  reEssgains(audio,freq)= deEssGains(audio,freq,-reEssAmount*2) : par(i, nrBands, (_-144) : ba.db2linear);
  nrOuts = select2(doubleOscs,nrBands,nrBands*nrOutChan);
};
