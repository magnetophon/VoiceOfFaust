//-----------------------------------------------
// vocoder analizer
//-----------------------------------------------
import("../lib/classicVocoder.lib"); // for StereoVolFilterBankNoFeedback

subLevel(audio,freq) = voice(audio,freq):ef.gate_mono(qThreshold-15,0,0.1,0.05):fi.lowpass(3,300):an.amp_follower_ud(0.003,0.005)*4:ma.tanh;

//subLevel(audio) = audio:fi.lowpass(3,300):an.amp_follower_ud((vslider("up", 0, 0, 1, 0)*0.1),(vslider("down", 0, 0, 1, 0.001)*0.1))*6:ma.tanh;

//analizerCenters(freq) = VocoderFreqs(0.853553,128):(par(i,nrBands, _,freq:*:min(ma.SR/2)));

analizerCenters(freq) = VocoderFreqs(analizerBottom ,analizerTop):(par(i,nrBands, _,freq:*:min(ma.SR/2):dezip));

//an.amp_follower_ud params set for minimal distortion
//also sounds cool to vary between this and 0

analizers=
ro.interleave(nrBands,4):par(i, nrBands,(autoQresonBP:an.amp_follower_ud(0.002 ,0.004)));

autoQresonBP(f,prevC,c,q) =
    // f:fi.resonbp(c:min((ma.SR/2)-10),Q,1):fi.resonbp(c:min((ma.SR/2)-10),Q,compensate*0.2)
    f:chooseResonBP(stableFilters,c:min((ma.SR/2)-10),Q,1):chooseResonBP(stableFilters,c:min((ma.SR/2)-10),Q,compensate*0.2)
    with {
      Q = ((((c-(prevC*autoQ)):max(20))*q)/(c:max(20)))*(1+(2*autoQ));
      BP1= 1.766;//1/hslider("[-1]bp1",	0, 0, 1, 0.001); //1.766
      BP2 =9.43;//1/hslider("[-1]bp2",	0, 0, 1, 0.001); //9.43
      FAC1 = 1;//hslider("[-1]fac1",	1, 1, 30, 0.001);//1
      FAC2 = 1.7;//hslider("[-1]fac2",	1, 1, 30, 0.001);//1.7
      FAC3 = 4;//hslider("[-1]fac3",	1, 1, 30, 0.001);//4
      com = 1/(Q/49);
      compensate =
            (((com*FAC1),(com<BP1)):*),
            ((((com-BP1)*FAC2+FAC1*BP1),((com>=BP1)&(com<=BP2))):*),
            ((((com-BP2)*FAC3+((BP2-BP1)*FAC2)+FAC1*BP1),(com>BP2)):*)
            :>_+1;
    };

// analizer(audio,freq,fidelity,enableDeEsser)
analizer(audio,freq,fidelity,0)=simpleAnalizer(audio,freq);
analizer(audio,freq,fidelity,1)=deEssedAnalizer(audio,freq,fidelity);

simpleAnalizer(audio,freq)=
(
  (audio<:si.bus(nrBands))
  ,(analizerCenters(freq)<:((si.bus(nrBands)<:(freq/2,par(i,nrBands,ba.selector(i-1,nrBands)))),(si.bus(nrBands))))
  ,(analizerQ<:si.bus(nrBands))
):analizers : gainScale(enableGainScale,gainScaling,freq);

deEssedAnalizer(audio,freq,fidelity) =
  (simpleAnalizer(audio,freq), deEssGains(audio,freq,deEssStrenght*dynAmount)) : ro.interleave(nrBands,2) : par(i, nrBands, (ba.linear2db+_):ba.db2linear)
with {
  dynAmount = 1-(deEssDynStrenght*(fidelity:pow(42):si.lag_ud(0.002,0.004)));
};

deEssGains(audio,freq,strenght) = preEmp : par(i, nrBands, ((deEssThreshold-_) : min(0) * strenght ) )
with {
  highPassPreEmp = analizerCenters(freq):par(i, nrBands,  ( ba.hz2pianokey - (deEssCorner:ba.hz2pianokey) ) :min(0) * (deEssdBperOctave/12));
  preEmp = ( simpleAnalizer(audio,freq) , highPassPreEmp):ro.interleave(nrBands,2) : par(i, nrBands, ba.linear2db+_);
};

// reEsser(audio,freq,doubleOscs,enableReEsser)
reEsser(audio,freq,doubleOscs,0) = si.bus(nrBands*(doubleOscs+1));
reEsser(audio,freq,doubleOscs,1) =
// si.bus(nrOuts)
    (
      si.bus(nrOuts),
      (
        (
          (no.noise<:si.bus(nrBands))
          // (no.multinoise(nrBands))
          ,(analizerCenters(freq)<:((si.bus(nrBands)<:(freq/2,par(i,nrBands,ba.selector(i-1,nrBands)))),(si.bus(nrBands))))
          ,reEssgains(audio,freq)
          ,(analizerQ<:si.bus(nrBands))
        )
        :(ro.interleave(nrBands,5):par(i, nrBands, volFilter))<:si.bus(nrOuts)
      )
    )
    :>si.bus(nrOuts)
with {
  reEssgains(audio,freq)= deEssGains(audio,freq,-reEssAmount*2) : par(i, nrBands, (_-144) : ba.db2linear);
  nrOuts = select2(doubleOscs,nrBands,nrBands*nrOutChan);
};
